import Foundation

{% for enum in types.based.SceneModel|enum %}
protocol {{ enum.name|replace:"SceneModel","InteractorProtocol" }}: AnyObject {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"Request" %}
    func receive{{ useCase.localName }}Request(_ request: {{ type.name }})
{% endfor %}
{% endfor %}
}

// sourcery:file:Snippets/Scenes/{{ enum.name|replace:"SceneModel","" }}/{{ enum.name|replace:"SceneModel","Interactor" }}.swift
class {{ enum.name|replace:"SceneModel","Interactor" }} {

    private let presenter: {{ enum.name|replace:"SceneModel","PresenterProtocol" }}

    init(presenter: {{ enum.name|replace:"SceneModel","PresenterProtocol" }}) {
        self.presenter = presenter
    }
}


extension {{ enum.name|replace:"SceneModel","Interactor" }}: {{ enum.name|replace:"SceneModel","InteractorProtocol" }} {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"Request" %}

    func receive{{ useCase.localName }}Request(_ request: {{ type.name }}) {
    }
{% endfor %}
{% endfor %}
}
// sourcery:end

protocol {{ enum.name|replace:"SceneModel","PresenterProtocol" }}: AnyObject {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"Response" %}
    func present{{ useCase.localName }}Response(_ response: {{ type.name }})
{% endfor %}
{% endfor %}
}

// sourcery:file:Snippets/Scenes/{{ enum.name|replace:"SceneModel","" }}/{{ enum.name|replace:"SceneModel","Presenter" }}.swift
class {{ enum.name|replace:"SceneModel","Presenter" }} {

    private let interface: {{ enum.name|replace:"SceneModel","InterfaceProtocol" }}

    init(interface: {{ enum.name|replace:"SceneModel","InterfaceProtocol" }}) {
        self.interface = interface
    }
}


extension {{ enum.name|replace:"SceneModel","Presenter" }}: {{ enum.name|replace:"SceneModel","PresenterProtocol" }} {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"Response" %}

    func present{{ useCase.localName }}Response(_ response: {{ type.name }}) {
    }
{% endfor %}
{% endfor %}
}
// sourcery:end

protocol {{ enum.name|replace:"SceneModel","InterfaceProtocol" }}: AnyObject {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"ViewModel" %}
    func display{{ useCase.localName }}ViewModel(_ viewModel: {{ type.name }})
{% endfor %}
{% endfor %}
}

// sourcery:file:Snippets/Scenes/{{ enum.name|replace:"SceneModel","" }}/{{ enum.name|replace:"SceneModel","ViewController" }}.swift
class {{ enum.name|replace:"SceneModel","ViewController" }}: UIViewController {

    private weak var interactor: {{ enum.name|replace:"SceneModel","InteractorProtocol" }}

    init(interactor: {{ enum.name|replace:"SceneModel","InteractorProtocol" }}) {
        self.interactor = interactor
    }
}


extension {{ enum.name|replace:"SceneModel","InterfaceProtocol" }} {
{% for useCase in enum.containedTypes|enum %}
{% for type in useCase.containedTypes where type.localName|hasSuffix:"ViewModel" %}

    func display{{ useCase.localName }}ViewModel(_ viewModel: {{ type.name }}) {
    }
{% endfor %}
{% endfor %}
}
// sourcery:end
{% endfor %}